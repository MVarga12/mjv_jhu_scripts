# (n)vim commands # {
    # Whitespace and Indenting # {
        dw - delete all whitespace online until a letter is reached
        :%s/^\s\+//e - deletes all leading whitespace in file
        =i{ - indents based on curly brackets
    }

    # Folding # {
        :set foldmethod=indent - folds based on indenting (I have this in my .vimrc)
        zc - closes fold cursor is in
        zo - opens fold cursor is in
        zM - closes all folds
        zR - opens all folds
    }

    # Sessions # {
        :mks - make a session
        :mks! - overwrite a session
        use vim-obsession + vim-prosession for automatic saving of sessions
    }
    
    # Tabs # {
        <C-w> T - make focused split into a new tab
        {i}gt - move to the ith tab
        tabm {+/-}{i} - move current tab {+/i} {i} tab spaces
    }
    
    # Various Macros # {
        # Saving and Quitting # {
            :wa - saves all tabs
            :wqa - saves all tabs and quits
        }
        
        # Normal Mode # {
            ^ - go to beginning of line
            $ - go to end of line
            % - when cursor is on opening bracket, goes to corresponding closing bracket
            df{i} - replace x with any symbol to delete until that symbol is found
            D - deletes to the end of the line (same as d$)
            I - enter insert mode at beginning of current line, disregarding leading whitespace
            A - enter insert mode at the end of current line
        }
    }
    
    # Package specific commands # {
        # EasyMotion # {
            \\w - shows hot keys for moving to each word (forwards)
            \\b - shows hot keys for moving to each word (backwards)
            \\s <character> - shows hot keys for moving to every copy of a chosen character
        }
        
        # vim-multiple-cursors # {
            <C-V> <C-n>... - select pattern and press <c-n> to select each subsequent match
            use regular normal mode commands to alter at the cursor
            <C-p> - previous pattern match
            <C-x> - skip (do not put a cursor) at the current pattern match
        }
        
        # surround.vim # {
            punctuation = '', "", (), [], {}, <>, HTML and XML tags
            ds{x} - deletes pair of punctuation around the current word, where {x} is the punctuation mark
            cs{x}{x'} - changes pair of punctuation around the current word, where {x} is the current punctuation and {x'} is the desired punctuation
            <visual selection> S{x} - adds punctuation around current visual selection, where {x} is the desired punctuation
        }
        
        # ctrlp # {
            <C-p> - opens search (remember, this is fuzzy search)
            <C-j> or <C-k> - move the selection up or down
            <C-t>, <C-v>, or <C-x> - open selection in new tab, vertical split, or horizontal split
            <C-z> - mark multiple files to open them with <C-o>
            <C-y> - open in new tab while creating the file and all parent directories
        }
    }
    for a good description of regex commands in vim, see http://vimregex.com/#pattern
}

# tmux commands # {
    All commands prefixed by "tmux" are run from outside tmux, unless otherwise preceded by a colon
    <leader> - <C-b> in fresh tmux installations. I use <C-a> and unbind <C-b> due to interactions with vim
    <leader>: - run typed commands from within a tmux session

    # Sessions # {
        tmux new -s {session-name} - start a new session from outside of tmux with {session-name} as the name
        tmux kill-session -t {session-name} - kills the session with {session-name} as the name
        :tmux kill-session -a - kills all session except current session (run from inside tmux session)
        <leader> $ - rename a session
        <leader> d - detach and return to terminal
        <leader> s - list all sessions (from within tmux). same as ``tmux ls'' from inside terminal
        tmux a - attach last used session
        tmux a -t {session-name} - attach session with {session-name} as the name
        <leader> ( or ) - move to next or previous session, respectively
    }

    # Windows # {
        <leader> c - create new window
        <leader> , - rename current window
        <leader> & - close current window
        <leader> n or p - move to next or previous window, respectively. I use <leader> <C-h> and <C-l>
        :swap-window -s {i} -t {j} - swap the ith window with the jth window
        :swap-window -s {i} -{x} - move the ith window x places
    }

    # Panes # {
        <leader> % or " - split window into panes vertically or horizontally. I use <leader> | or -
        <leader> { or } - move current pane left or right
        <leader> z - maximize or minimize current pane (toggle)
        <leader> ! - convert pane into a new window
        :joinp -s {i}.{j} -t {x}.{y} - join the {jth} pane of window {i} with the {yth} pane of window {x}. Must always have a pane number, even if the window only has one pane (i.e. joinp -s 1.1 -t 2.1)
        <leader> ↑ or ↓ or ← or → - resize window up, down, left, or right, respectively. can hold down <Ctrl> to iteratively resize
        <leader> x - close current pane
        <leader> C-x - toggle send command to all panes in window (this is set in my .tmux.conf file, bind C-x setw synchronize-panes)
    }

    # Buffer # {
        :setw -g mode-keys vi - use vi key-bindings in buffer
        <leader> [ - enter buffer mode
        <leader> g - goto top
        <leader> G - goto bottom
        <leader> q or <Esc> - quit buffer 
    }
}

# Shell Commands # {
    # fish commands # {
        # vim-key-bindings # {
            # vim commands which do NOT work # {
            d<x>
            search
            }
        }

        # brace expansion # {
            - csv in curly braces will be expanded so each element becomes a new parameter
            - examples:
                a) echo input.{c,h,txt} 
                # outputs 'input.c input.h input.txt'
                b) mv *.{dat,txt} dir
                # moves all files with .dat and .txt file types to directory
        }
    }
}
